name: Update Pull Request Label With Node.js

on:
  schedule:
    - cron: '0 9 * * *'  # 매일 아침 9시, UTC
  workflow_dispatch:  # 수동으로 워크플로우를 트리거할 수 있는 옵션

jobs:
  update-labels:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install dependencies
        run: |
          npm install @octokit/rest
          npm install axios
          
      - name: Update labels with nodejs
        env:
          GITHUB_TOKEN: ${{ secrets.ACTIONS_TEST_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          node -e "
            const { Octokit } = require('@octokit/rest');
            const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });
            const [owner, repo] = process.env.GITHUB_REPOSITORY.split('/');
            
            (async () => {
              try {
                const { data: pulls } = await octokit.pulls.list({ owner, repo, state: 'open' });

                for (const pull of pulls) {
                  const labels = pull.labels.map(label => label.name);
                  const newLabels = labels.map(label => {
                    const match = label.match(/^D-(\\d+)$/);
                    if (match) {
                      const number = parseInt(match[1], 10);

                      if (number < 1) {
                        return \`:boom:\`;
                      }

                      return \`D-\${number - 1}\`;
                    }

                    return label;
                  });

                  await octokit.issues.update({
                    owner,
                    repo,
                    issue_number: pull.number,
                    labels: newLabels,
                  });
                }
              } catch (error) {
                console.error(\`Error updating labels: \${error.message}\`);
              }
            })();
          "
          
      - name: Send Slack notifications
        env:
          GITHUB_TOKEN: ${{ secrets.ACTIONS_TEST_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          SLACK_WEBHOOK_URL: ${{ secrets.ACTIONS_TEST_SLACK_WEBHOOK_URL }}
        run: |
          node -e "
            const axios = require('axios');
            const { Octokit } = require('@octokit/rest');
            const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });
            const [owner, repo] = process.env.GITHUB_REPOSITORY.split('/');
            
            (async () => {
              try {
                const { data: pulls } = await octokit.pulls.list({ owner, repo, state: 'open' });
                const labelMap = new Map();
                const prList = [];

                for (const pull of pulls) {
                  pull.labels.forEach(label => {
                    const match = label.name.match(/^D-(\\d+)$/);

                    if (!match && label.name != ':boom:') {
                      return;
                    }

                    if (labelMap[label.name] == undefined) {
                      labelMap[label.name] = 1;
                    } else {
                      labelMap[label.name] += 1;
                    }

                    const text = \`<\${pull.html_url}|[\${label.name}] \${pull.title}>\`;

                    prList.push({
                      "value": text,
                      "short": false
                    });
                  });
                }

                let message;

                if (prList.length > 0) {
                  const keys = Array.from(labelMap.keys());
                  const prCount = keys.map(key => \`*\${key}*: \${map.get(key)}\`).join('\n');
                  keys.sort();
                  message = {
                    "text": ":rocket: 팀 여러분! 멋진 새 PR들이 여러분의 마법 같은 리뷰를 기다리고 있어요! :sparkles:",
                    "attachments": [
                      {
                        "color": "#36a64f",
                        "title": "리뷰 대기 중인 PR 목록",
                        "text": prCount,
                        "fields": prList,
                        "footer": "행복한 코딩 되세요! :tada:"
                      }
                    ]
                  };
                } else {
                  message = {
                    "text": ":tada: 우와! 대기 중인 PR이 없어요! :white_check_mark:",
                    "attachments": [
                      {
                        "color": "#FF4500",
                        "title": "모두 완료!",
                        "text": ":sparkles: 모두 처리 완료! 이제 편히 쉬거나 다음 대작을 시작해볼까요? :rocket:",
                        "footer": "훌륭한 작업 계속 이어가세요! :fire:"
                      }
                    ]
                  };
                }

                await axios.post(process.env.SLACK_WEBHOOK_URL, message);
              } catch (error) {
                console.error(\`Error sending notifications: \${error.message}\`);
              }
            })();
          "
